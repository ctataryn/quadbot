(ns quadbot.persistence
      (:use [korma.db])
      (:use [korma.core])
      (:use [clojure.test]))

(def dbspec  {:classname   "org.h2.Driver" 
             :subprotocol "h2" 
             :subname "~/.quadbot/db/quadbot"
             :user     "sa"
             :password ""})

(defdb mydb dbspec)
(defentity factoid)

(defn create-tables
  "Create a users table"
  []
  (do 
    (clojure.java.jdbc/create-table
      "factoid"
      [:id          "IDENTITY" "NOT NULL" "PRIMARY KEY"]
      [:created_by  "VARCHAR(255)"]
      [:fact        "VARCHAR(255)"]
      [:answer      "VARCHAR"]
      [:created_on  "TIMESTAMP" "NOT NULL" "DEFAULT CURRENT_TIMESTAMP"])
   (clojure.java.jdbc/do-commands "CREATE INDEX FACTIDX ON factoid(fact)")))

(defn drop-tables
  "Drop factoid table"
  []
  (clojure.java.jdbc/drop-table
    "factoid"))

(defn get-identity
  "Gets the last identity generated by the db"
  []
  (clojure.java.jdbc/with-query-results rs ["select IDENTITY()"]))

;; (invoke-with-connection drop-tables)
;; (invoke-with-connection create-tables)
;; (def ident (invoke-with-connection #(insert-factoid "ThaDon" "bleh" "blarg")))
(defn invoke-with-connection [f]
  (clojure.java.jdbc/with-connection
     dbspec
     (clojure.java.jdbc/transaction
       (f))))
  
;returns the id of the factoid which was created
(defn insert-factoid [nick fact answer] 
  "(insert factoid) returns a map of {:SCOPE_IDENTITY() <number>} we want the number"
    (second (first (insert factoid
      (values {:created_by nick :fact fact :answer answer}))
      )))

(defn insert-factoid2 [] ;[nick fact answer] 
  "(insert users) returns a map of {:SCOPE_IDENTITY() <number>} we want the number"
    (insert factoid
      ;(values {:created_by nick :fact fact :answer answer}))
      (values {:created_by "ThaDon" :fact "Bleh" :answer "Blarg"})))
